{"version":3,"sources":["formUtils.js","Validator.js","components/Input.js","fetchUtils.js","components/Servermsg.js","components/Authform.js","components/Userform.js","components/SelectUser.js","App.js","serviceWorker.js","index.js"],"names":["getFormData","form","data","elements","input","type","name","value","checked","getDataNotouched","element","dataset","notouched","setDataNotouched","valTouched","ERROR_MSGS","count","Validator","inputs","initValidation","checkers","forEach","check","checkersSet","field","fieldName","msgSet","checkName","required","minLength","bind","maxLength","regExp","errorBox","nextElementSibling","this","submitbtn","querySelector","filter","validator","map","toggleDisabledBtn","length","trim","pattern","RegExp","test","mutationValue","checkValue","countCheckers","index","checkResult","valid","classList","add","innerHTML","remove","disabled","checkValidByName","Array","from","reduce","resultCheck","currentInput","Input","props","opts","id","label","readOnly","requiredView","inputProps","valueProps","requiredSpan","className","htmlFor","onChange","changeHandler","fError","error","console","log","fetchApp","url","fCallback","method","token","headers","fetch","body","JSON","stringify","then","res","json","ServerMsg","classNameModify","msg","AuthForm","handleInputChange","handleSubmitForm","authForm","formRef","current","extendOpts","key","state","event","serverMsg","onSubmit","ref","target","setState","preventDefault","Promise","resolve","validate","result","join","expiredDate","Date","getTime","localStorage","setItem","clear","setStorageToken","setStateToken","username","setUsername","React","Component","UserForm","userForm","prevProps","updateUserData","resetPropertiesByName","password","updateUsers","FORM","METHOD","DATA","ID","onlyNumber","characters","charactersLength","i","charAt","Math","floor","random","makeId","detail","SelectUser","options","usersSet","user","getUsers","setStateUsers","list","App","useState","getItem","getToken","stateToken","stateUsername","stateUserindex","setUserindex","stateUsers","needGetUsers","setNeedGetUsers","refAuthForm","useRef","refUserForm","titleBox","userData","is_active","is_superuser","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b178629a.chunk.js","sourcesContent":["export const getFormData = (form) => {\r\n    let data = {}\r\n    for (const input of form.elements){\r\n        if (input.type !== 'submit' && input.type !== 'button') {\r\n            data[input.name] = (input.type !== 'checkbox')\r\n                ? form[input.name].value\r\n                : form[input.name].checked\r\n        }\r\n    }\r\n    return data\r\n}\r\n\r\nexport const getInputsForValidation = (inputsArray) => {\r\n    return inputsArray.filter(input => input.validator).map( input => {\r\n        return {\r\n            fieldName: input.name,\r\n            checkName: input.validator,\r\n        }\r\n    })\r\n}\r\n\r\nexport const setToken = (value) => {\r\n    if (value) {\r\n        const expiredDate = new Date(new Date().getTime() + 3600 * 1000)\r\n        localStorage.setItem('expiredDate', expiredDate)\r\n        localStorage.setItem('token', value)\r\n    } else {\r\n        localStorage.clear()\r\n    }\r\n}\r\nexport const getToken = () => {\r\n    const expiredDate = localStorage.getItem('expiredDate')\r\n    if (expiredDate) {\r\n        if (new Date() < new Date(expiredDate)) {\r\n            return localStorage.getItem('token')\r\n        } else {\r\n            localStorage.clear()\r\n        }\r\n    }\r\n    return null\r\n}\r\n\r\nexport const getStorageUsername = () => localStorage.getItem('username')\r\nexport const setStorageUsername = (name) => localStorage.setItem('username', name)\r\n","import { getInputsForValidation } from './formUtils'\r\n\r\nconst CLASSNAME_ERRORFIELD = 'App-errorField'\r\nconst CLASSNAME_ERRORMSG = 'App-errorMsg'\r\n\r\nexport const DATASET_VALID_PROP = 'data-valid'\r\nconst getDataValid = (element) => element.dataset.valid\r\nconst setDataValid = (element, checkValue) => {\r\n    if (element.dataset.valid) {\r\n        element.dataset.valid = checkValue\r\n    }\r\n}\r\nconst getElements = (form) => Array.from(form.elements).filter( element => 'valid' in element.dataset)\r\n\r\nexport const DATASET_TOUCH_PROP = 'data-notouched'\r\nconst getDataNotouched = (element) => element.dataset.notouched\r\nexport const setDataNotouched = (element, valTouched) => {\r\n    if (element.dataset.notouched) {\r\n        element.dataset.notouched = valTouched\r\n    }\r\n}\r\n\r\nexport const USERNAMESIMPLE = 'username_simple'\r\nexport const USERNAME = 'username'\r\nexport const REQUIRED = 'required'\r\nexport const PASSWORD = 'password'\r\nexport const FIRSTNAME = 'firstname'\r\nexport const LASTNAME = 'lastname'\r\n\r\nconst ERROR_MSGS = {\r\n    'required': 'This field may not be blank.',\r\n    'minl': (count) => `Minimal length this field ${count}`,\r\n    'maxl': (count) => `Maximal length this field ${count}`,\r\n    'nopattern': 'Value does not match pattern',\r\n}\r\n\r\nexport default class Validator {\r\n    constructor(form, inputs){\r\n        this.form = form\r\n        this.submitbtn = form.querySelector('[type=\"submit\"]')\r\n        this.checkers = getInputsForValidation(inputs)\r\n\r\n        this.initValidation()\r\n        this.toggleDisabledBtn()\r\n    }\r\n\r\n    get valid (){\r\n        return this.checkers.reduce( (resultCheck, currentInput) => {\r\n            const { fieldName } = currentInput\r\n            const field = this.form[fieldName]\r\n            return resultCheck && (getDataValid(field) === 'true' || getDataNotouched(field) === 'true')\r\n        }, true )\r\n    }\r\n\r\n    minLength(count, value) {\r\n        return value.length >= count\r\n    }\r\n\r\n    maxLength(count, value) {\r\n        return value.length <= count\r\n    }\r\n\r\n    required(value) {\r\n        if (!value) { return false }\r\n        return !!value.trim().length\r\n    }\r\n\r\n    regExp(pattern, value) {\r\n        return new RegExp(pattern).test(value)\r\n    }\r\n\r\n    initValidation = () => {\r\n        const DEFAULT_MINLENGTH = 1\r\n        const DEFAULT_MAXLENGTH = 150\r\n\r\n        this.checkers.forEach( check => {\r\n            const field = this.form[check.fieldName]\r\n            let checkersSet, msgSet = []\r\n\r\n            switch (check.checkName) {\r\n                case REQUIRED: checkersSet = [this.required]\r\n                    msgSet = [ERROR_MSGS.required]; break\r\n\r\n                case USERNAMESIMPLE: checkersSet = [\r\n                    this.required,\r\n                    this.minLength.bind(this, DEFAULT_MINLENGTH),\r\n                    this.maxLength.bind(this, DEFAULT_MAXLENGTH),\r\n                ]\r\n                msgSet = [ERROR_MSGS.required, ERROR_MSGS.minl(DEFAULT_MINLENGTH), ERROR_MSGS.maxl(DEFAULT_MAXLENGTH)];\r\n                break\r\n\r\n                case USERNAME: checkersSet = [\r\n                    this.required,\r\n                    this.minLength.bind(this, DEFAULT_MINLENGTH),\r\n                    this.maxLength.bind(this, DEFAULT_MAXLENGTH),\r\n                    this.regExp.bind(this, '^[\\\\w.@+-]+$')\r\n                ];\r\n                msgSet = [\r\n                    ERROR_MSGS.required,\r\n                    ERROR_MSGS.minl(DEFAULT_MINLENGTH),\r\n                    ERROR_MSGS.maxl(DEFAULT_MAXLENGTH),\r\n                    'Letters, digits and @/./+/-/_ only'\r\n                ]\r\n                break\r\n\r\n                case PASSWORD: checkersSet = [\r\n                    this.minLength.bind(this, DEFAULT_MINLENGTH),\r\n                    this.maxLength.bind(this, 128),\r\n                    this.regExp.bind(this, '^(?=.*[A-Z])(?=.*\\\\d).{8,}$')\r\n                ];\r\n                msgSet = [\r\n                    ERROR_MSGS.minl(DEFAULT_MINLENGTH),\r\n                    ERROR_MSGS.maxl(128),\r\n                    ERROR_MSGS.nopattern\r\n                ]\r\n                break\r\n\r\n                case FIRSTNAME: checkersSet = [\r\n                    this.maxLength.bind(this, 30),\r\n                ]\r\n                msgSet = [ERROR_MSGS.maxl(30),]\r\n                break\r\n\r\n                case LASTNAME: checkersSet = [\r\n                    this.maxLength.bind(this, DEFAULT_MAXLENGTH),\r\n                ]\r\n                msgSet = [ERROR_MSGS.maxl(DEFAULT_MAXLENGTH)]\r\n                break\r\n\r\n                default: checkersSet = []\r\n            }\r\n\r\n            field.checkers = checkersSet\r\n            field.msgSet = msgSet\r\n            field.errorBox = field.nextElementSibling\r\n        })\r\n    }\r\n\r\n    checkValidByName(fieldName, mutationValue) {\r\n        const field = this.form[fieldName]\r\n        if (field.checkers) {\r\n            const countCheckers = field.checkers.length\r\n            for (let index = 0; index < countCheckers; index++) {\r\n                const checkResult = field.checkers[index]( typeof(mutationValue) === 'undefined' ? field.value : mutationValue)\r\n\r\n                setDataValid(field, checkResult)\r\n                if (checkResult === false && getDataNotouched(field) !== 'true') {\r\n                    field.classList.add(CLASSNAME_ERRORFIELD)\r\n                    field.errorBox.classList.add(CLASSNAME_ERRORMSG)\r\n                    field.errorBox.innerHTML = field.msgSet[index]\r\n                    index = countCheckers\r\n                } else {\r\n                    field.classList.remove(CLASSNAME_ERRORFIELD)\r\n                    field.errorBox.classList.remove(CLASSNAME_ERRORMSG)\r\n                    field.errorBox.innerHTML = ''\r\n                }\r\n\r\n                if (!checkResult) { index = countCheckers }\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleDisabledBtn() {\r\n        if (this.submitbtn) {\r\n            this.submitbtn.disabled = !this.valid\r\n        }\r\n    }\r\n\r\n    resetPropertiesByName(name, mutationValue) {\r\n        const field = this.form[name]\r\n        if (field) {\r\n            setDataNotouched(field, !!!mutationValue)\r\n            this.checkValidByName(name, mutationValue)\r\n        }\r\n    }\r\n\r\n    validate(){\r\n        getElements(this.form).forEach(input => {\r\n            setDataNotouched(input, false)\r\n\r\n            this.checkValidByName(input.name)\r\n        })\r\n        return this.valid\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { DATASET_VALID_PROP, DATASET_TOUCH_PROP } from \"../Validator\";\r\n\r\nexport function Input(props) {\r\n    const {id, type, name, label, readOnly, validator, requiredView} = props.opts\r\n    const inputProps = { id, type, name, readOnly }\r\n    if (validator) {\r\n        inputProps[DATASET_VALID_PROP] = false\r\n        inputProps[DATASET_TOUCH_PROP] = props.value.length > 0 ? false : true\r\n    }\r\n    const valueProps = (type === 'checkbox') ? { checked: props.value} : {value: props.value}\r\n\r\n    const requiredSpan = requiredView ? <span className=\"App-required\">*</span> : null\r\n\r\n    return (\r\n      <div className=\"App-inputBox\">\r\n          <label htmlFor={id} className={`App-label ${readOnly ? 'App-label--readonly' : ''}`}>{ label }\r\n              {requiredSpan}\r\n          </label>\r\n          <input className=\"App-inputText\"\r\n                 { ...inputProps }\r\n                 { ...valueProps }\r\n                 onChange={ props.changeHandler }/>\r\n          <div className=\"App-gap\"></div>\r\n      </div>\r\n    )\r\n}\r\n","const fError = (error) => {\r\n    console.log(\"FETCH ERROR: \", error)\r\n}\r\n\r\nexport function fetchApp(url, data, fCallback, method = 'POST', token) {\r\n    const headers = {'Content-Type': 'application/json;charset=utf-8'}\r\n    if (token) {\r\n        headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    fetch(url, {\r\n        method,\r\n        headers,\r\n        body: JSON.stringify({ ...data })\r\n    })\r\n        .then(res => res.json(), fError)\r\n        .then(\r\n            fCallback,\r\n            fError\r\n        )\r\n}\r\n\r\nexport function makeId(length, onlyNumber = true) {\r\n    let result           = '';\r\n    let characters       = `0123456789${onlyNumber ? '': 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'}`;\r\n    const charactersLength = characters.length;\r\n    for ( let i = 0; i < length; i++ ) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return onlyNumber ? +result : result;\r\n}\r\n","import React from 'react';\r\n\r\nexport function ServerMsg(props){\r\n    return (\r\n        <div className={`App-serverMsg ${props.classNameModify ? props.classNameModify : ''}`}>\r\n            { props.msg }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Input} from \"./Input\";\r\nimport {fetchApp} from \"../fetchUtils\";\r\nimport Validator, { USERNAMESIMPLE, REQUIRED } from \"../Validator\";\r\nimport { getFormData, setToken as setStorageToken, setStorageUsername } from \"../formUtils\";\r\nimport {ServerMsg} from \"./Servermsg\";\r\n\r\nexport default class AuthForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.inputs = [\r\n            { name: 'username', type: 'text', id: 'userLogin', label: 'Username', validator: USERNAMESIMPLE, requiredView: true},\r\n            { name: 'password', type: 'password', id: 'userPassword', label: 'Password', validator: REQUIRED, requiredView: true}\r\n        ]\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmitForm = this.handleSubmitForm.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        const authForm = this.props.formRef.current\r\n        if (authForm) { this.validator = new Validator(authForm, this.inputs) }\r\n    }\r\n\r\n    render() {\r\n        if (this.props.token) return null;\r\n\r\n        const inputs = this.inputs.map( opts => {\r\n            const extendOpts = {}\r\n            if (opts.validator) { extendOpts.validator = opts.validator }\r\n\r\n            return <Input key={ opts.id }\r\n                   opts={ opts }\r\n                   {...extendOpts}\r\n                   value={this.state && this.state[opts.name] || ''}\r\n                   changeHandler={ (event) => {this.handleInputChange(event)}}\r\n            /> })\r\n\r\n        const serverMsg = this.state && this.state.serverMsg && (\r\n            <ServerMsg msg={ this.state.serverMsg }\r\n                       classNameModify=\"App-serverMsg--error\"\r\n            />\r\n        )\r\n\r\n        return(\r\n            <>\r\n            <form onSubmit={ this.handleSubmitForm } ref={ this.props.formRef }>\r\n                { inputs }\r\n                <div className=\"App-buttonBox\">\r\n                    <input className=\"App-button\" type=\"submit\" value=\"Send\"/>\r\n                </div>\r\n            </form>\r\n\r\n            { serverMsg }\r\n            </>\r\n        )\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: target.value,\r\n            'serverMsg': null\r\n        });\r\n        this.validator.checkValidByName(name)\r\n        this.validator.toggleDisabledBtn()\r\n    }\r\n\r\n    handleSubmitForm(event) {\r\n        event.preventDefault()\r\n\r\n        new Promise((resolve) => {\r\n            const resultCheck = this.validator.validate()\r\n            resolve(resultCheck)\r\n        }).then((resultCheck) => {\r\n            if (resultCheck) {\r\n                fetchApp('https://emphasoft-test-assignment.herokuapp.com/api-token-auth/',\r\n                    getFormData(this.props.formRef.current), (result) => {\r\n                        let msg = null\r\n                        if (result['non_field_errors']) {\r\n                            msg = result['non_field_errors'].join('\\n')\r\n                        }\r\n                        this.setState({'serverMsg': msg})\r\n\r\n                        if (result.token) {\r\n                            setStorageToken(result.token)\r\n                            this.props.setStateToken(result.token)\r\n                            setStorageUsername(this.state.username)\r\n                            this.props.setUsername(this.state.username)\r\n                        }\r\n                    })\r\n            }\r\n\r\n            this.validator.toggleDisabledBtn()\r\n        })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Input} from \"./Input\";\r\nimport {fetchApp, makeId} from \"../fetchUtils\";\r\nimport Validator, {USERNAME, FIRSTNAME, LASTNAME, PASSWORD, setDataNotouched} from \"../Validator\";\r\nimport {getFormData} from \"../formUtils\";\r\nimport {ServerMsg} from \"./Servermsg\";\r\n\r\nexport default class UserForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.inputs = [\r\n            { name: 'id', type: 'text', id: 'userEditId', label: 'ID', readOnly: true},\r\n            { name: 'username', type: 'text', id: 'userEditLogin', label: 'Username', validator: USERNAME, requiredView: true},\r\n            { name: 'first_name', type: 'text', id: 'userEditFirstName', label: 'First name', validator: FIRSTNAME},\r\n            { name: 'last_name', type: 'text', id: 'userEditLastName', label: 'Last name', validator: LASTNAME},\r\n            { name: 'password', type: 'password', id: 'userEditPassword', label: 'Password', validator: PASSWORD, requiredView: true},\r\n            { name: 'is_active', type: 'checkbox', id: 'userIsActive', label: 'Active', requiredView: true},\r\n            { name: 'is_superuser', type: 'checkbox', id: 'userIsSuper', label: 'Superuser status', readOnly: true}\r\n        ]\r\n\r\n        this.handleSubmitForm = this.handleSubmitForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        const userForm = this.props.formRef.current\r\n        if (userForm) { this.validator = new Validator(userForm, this.inputs) }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.data.id !== this.props.data.id) {\r\n\r\n            this.updateUserData(this.props.data)\r\n            for (let key in this.props.data) {\r\n                this.validator.resetPropertiesByName(key, this.props.data[key])\r\n            }\r\n        /*\r\n         * При чтении пользователей значение password не приходит,\r\n         * дополнительная обработка: */\r\n            if (!('password' in this.props.data)) {\r\n                this.updateUserData({password: ''})\r\n                this.validator.resetPropertiesByName('password', '')\r\n            }\r\n\r\n            this.validator.toggleDisabledBtn()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const inputs = this.inputs.map( opts => {\r\n            const extendOpts = {}\r\n            if (opts.validator) { extendOpts.validator = opts.validator }\r\n\r\n            return <Input key={ opts.id }\r\n                          opts={ opts }\r\n                          {...extendOpts}\r\n                          value={this.state && this.state[opts.name] || ''}\r\n                          changeHandler={ (event) => {this.handleInputChange(event)}}\r\n            /> })\r\n\r\n        const serverMsg = this.state && this.state.serverMsg && (\r\n            <ServerMsg msg={ this.state.serverMsg }/>\r\n        )\r\n\r\n        return (\r\n          <>\r\n            <form onSubmit={ this.handleSubmitForm } ref={ this.props.formRef }>\r\n                { inputs }\r\n                <div className=\"App-buttonBox\">\r\n                    <input className=\"App-button\" type=\"submit\" value=\"Save\"/>\r\n                </div>\r\n            </form>\r\n\r\n            { serverMsg }\r\n          </>\r\n        )\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n\r\n        if (!target.readOnly) {\r\n            const name = target.name;\r\n            const value = target.type === 'checkbox' ? target.checked : target.value\r\n\r\n            this.setState({\r\n                [name]: value,\r\n                'serverMsg': null\r\n            });\r\n            this.validator.checkValidByName(name)\r\n            this.validator.toggleDisabledBtn()\r\n        }\r\n    }\r\n\r\n    handleSubmitForm(event) {\r\n        event.preventDefault()\r\n\r\n\r\n        new Promise((resolve) => {\r\n            const resultCheck = this.validator.validate()\r\n            resolve(resultCheck)\r\n        }).then((resultCheck) => {\r\n\r\n            if (resultCheck) {\r\n\r\n                const {token, updateUsers} = this.props\r\n                const FORM = this.props.formRef.current\r\n                const METHOD = this.state.id ? 'PATCH' : 'POST'\r\n                let DATA = getFormData(FORM)\r\n                let url = 'https://emphasoft-test-assignment.herokuapp.com/api/v1/users/'\r\n                if (this.state.id) {\r\n                    url = `${url}${this.state.id}/`\r\n                } else {\r\n                    const ID = makeId(4)\r\n                    DATA.id = ID\r\n                }\r\n\r\n                fetchApp(url, DATA, (result) => {\r\n                    const msg = result.detail\r\n                    if (msg) this.setState({'serverMsg': msg})\r\n\r\n                    updateUsers()\r\n                    this.validator.toggleDisabledBtn()\r\n                }, METHOD, token)\r\n            }\r\n        })\r\n    }\r\n\r\n    updateUserData(data) {\r\n        this.setState({\r\n            ...data\r\n        })\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport function SelectUser(props) {\r\n    const options = props.usersSet.map(\r\n        (user, index) => <option value={ ++index } key={`user_${user.id}`} >{user.username}</option>\r\n    )\r\n\r\n    return (\r\n        <div className=\"App-selectBox\">\r\n            <select className=\"App-select\" value={props.value} onChange={ props.changeHandler }>\r\n                <option value={ 0 }>--</option>\r\n                {options}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef } from 'react';\r\nimport AuthForm from './components/Authform'\r\nimport UserForm from \"./components/Userform\";\r\nimport { SelectUser } from \"./components/SelectUser\";\r\nimport { getToken, getStorageUsername } from \"./formUtils\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [stateToken, setStateToken] = useState( getToken() )\r\n  const [stateUsername, setUsername] = useState( getStorageUsername() )\r\n  const [stateUserindex, setUserindex] = useState(0)\r\n  const [stateUsers, setStateUsers] = useState([])\r\n  const [needGetUsers, setNeedGetUsers] = useState(true)\r\n\r\n  const refAuthForm = useRef(null)\r\n  const refUserForm = useRef(null)\r\n\r\n  if (stateToken && needGetUsers) {\r\n      setNeedGetUsers(false)\r\n      getUsers(stateToken, setStateUsers)\r\n  }\r\n\r\n  const titleBox = stateToken\r\n      ? <div className=\"App-titleBox\">\r\n          <h4>Please add user or edit current from list</h4>\r\n          <SelectUser usersSet={ stateUsers }\r\n                      value={ stateUserindex }\r\n                      changeHandler={ event => { setUserindex( +event.target.value )} }\r\n          />\r\n        </div>\r\n      : null\r\n\r\n  const EMPTY_USER_INPUT = {\r\n      id: null, username: '', 'first_name': '', 'last_name': '', password: '', is_active: true, is_superuser: false\r\n  }\r\n  const userData = {data: (stateUserindex > 0) ? stateUsers[stateUserindex - 1] : EMPTY_USER_INPUT }\r\n  let userForm = stateToken\r\n      ? <UserForm token={ stateToken }\r\n                  formRef={ refUserForm }\r\n                  {...userData}\r\n                  updateUsers = { () => {\r\n                      getUsers(stateToken, setStateUsers);\r\n                      /*RESET: */setUserindex(0) }\r\n                  }\r\n        />\r\n      : null\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n          <div className=\"App-wrapper\">Welcome { stateUsername || ''}</div>\r\n      </header>\r\n\r\n      <div className=\"App-body\">\r\n          <div className=\"App-wrapper\">\r\n              <AuthForm token={ stateToken }\r\n                        setStateToken={ setStateToken }\r\n                        setUsername={ setUsername }\r\n                        formRef={ refAuthForm }\r\n              />\r\n\r\n              { titleBox }\r\n\r\n              { userForm }\r\n          </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction getUsers(token, setStateUsers) {\r\n    fetch('https://emphasoft-test-assignment.herokuapp.com/api/v1/users/', {\r\n        method: 'GET',\r\n        headers: {'Content-Type': 'application/json;charset=utf-8', \"Authorization\": `Token ${token}`}\r\n    }).then( result => result.json())\r\n      .then( list => { setStateUsers(list) })\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
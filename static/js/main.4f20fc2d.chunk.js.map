{"version":3,"sources":["formUtils.js","Validator.js","components/Input.js","fetchUtils.js","components/Servermsg.js","components/Authform.js","components/Userform.js","components/SelectUser.js","App.js","serviceWorker.js","index.js"],"names":["getFormData","form","data","elements","input","type","name","value","resetDataNotouched","element","dataset","notouched","ERROR_MSGS","count","Validator","inputs","initValidation","checkers","forEach","check","checkersSet","field","fieldName","msgSet","checkName","required","minLength","bind","maxLength","regExp","errorBox","nextElementSibling","this","submitbtn","querySelector","filter","validator","map","toggleDisabledBtn","length","trim","pattern","RegExp","test","checkValue","countCheckers","index","checkResult","valid","classList","add","innerHTML","remove","disabled","Array","from","checkValidByName","reduce","resultCheck","currentInput","Input","props","opts","id","label","readOnly","requiredView","inputProps","valueProps","checked","requiredSpan","className","htmlFor","onChange","changeHandler","fError","error","console","log","fetchApp","url","fCallback","method","token","headers","fetch","body","JSON","stringify","then","res","json","ServerMsg","classNameModify","msg","AuthForm","handleInputChange","handleSubmitForm","formRef","current","extendOpts","key","state","event","serverMsg","onSubmit","ref","target","setState","preventDefault","result","join","setToken","setUsername","username","React","Component","UserForm","updateUserData","prevProps","validate","updateUsers","FORM","METHOD","DATA","ID","onlyNumber","characters","charactersLength","i","charAt","Math","floor","random","makeId","detail","SelectUser","options","usersSet","user","getUsers","setStateUsers","list","App","useState","stateToken","stateUsername","stateUserindex","setUserindex","stateUsers","needGetUsers","setNeedGetUsers","refAuthForm","useRef","refUserForm","titleBox","userData","password","is_active","is_superuser","userForm","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"iQAAaA,EAAc,SAACC,GACxB,IADiC,EAC7BC,EAAO,GADsB,cAEbD,EAAKE,UAFQ,IAEjC,2BAAkC,CAAC,IAAxBC,EAAuB,QACX,WAAfA,EAAMC,MAAoC,WAAfD,EAAMC,OACjCH,EAAKE,EAAME,MAAQL,EAAKG,EAAME,MAAMC,QAJX,8BAOjC,OAAOL,GAaEM,EAAqB,SAACC,GAC3BA,EAAQC,QAAQC,YAChBF,EAAQC,QAAQC,WAAY,ICD9BC,EACU,+BADVA,EAEM,SAACC,GAAD,0CAAwCA,IAF9CD,EAGM,SAACC,GAAD,0CAAwCA,IAH9CD,EAIW,+BAGIE,E,WACjB,WAAYb,EAAMc,GAAQ,IAAD,gCAgCzBC,eAAiB,WAIb,EAAKC,SAASC,SAAS,SAAAC,GACnB,IACIC,EADEC,EAAQ,EAAKpB,KAAKkB,EAAMG,WACbC,EAAS,GAE1B,OAAQJ,EAAMK,WACV,IAtDQ,WAsDOJ,EAAc,CAAC,EAAKK,UAC/BF,EAAS,CAACX,GAAsB,MAEpC,IA3Dc,kBA2DOQ,EAAc,CAC/B,EAAKK,SACL,EAAKC,UAAUC,KAAK,EAbN,GAcd,EAAKC,UAAUD,KAAK,EAbN,MAelBJ,EAAS,CAACX,EAAqBA,EAhBb,GAgBiDA,EAfjD,MAgBlB,MAEA,IAlEQ,WAkEOQ,EAAc,CACzB,EAAKK,SACL,EAAKC,UAAUC,KAAK,EArBN,GAsBd,EAAKC,UAAUD,KAAK,EArBN,KAsBd,EAAKE,OAAOF,KAAK,EAAM,iBAE3BJ,EAAS,CACLX,EACAA,EA3Bc,GA4BdA,EA3Bc,KA4Bd,sCAEJ,MAEA,IA9EQ,WA8EOQ,EAAc,CACzB,EAAKM,UAAUC,KAAK,EAlCN,GAmCd,EAAKC,UAAUD,KAAK,EAAM,KAC1B,EAAKE,OAAOF,KAAK,EAAM,gCAE3BJ,EAAS,CACLX,EAvCc,GAwCdA,EAAgB,KAChBA,GAEJ,MAEA,IAzFS,YAyFOQ,EAAc,CAC1B,EAAKQ,UAAUD,KAAK,EAAM,KAE9BJ,EAAS,CAACX,EAAgB,KAC1B,MAEA,IA9FQ,WA8FOQ,EAAc,CACzB,EAAKQ,UAAUD,KAAK,EAnDN,MAqDlBJ,EAAS,CAACX,EArDQ,MAsDlB,MAEA,QAASQ,EAAc,GAG3BC,EAAMJ,SAAWG,EACjBC,EAAME,OAASA,EACfF,EAAMS,SAAWT,EAAMU,uBA9F3BC,KAAK/B,KAAOA,EACZ+B,KAAKC,UAAYhC,EAAKiC,cAAc,mBACpCF,KAAKf,SAAkCF,EDrBxBoB,QAAO,SAAA/B,GAAK,OAAIA,EAAMgC,aAAWC,KAAK,SAAAjC,GACrD,MAAO,CACHkB,UAAWlB,EAAME,KACjBkB,UAAWpB,EAAMgC,cCoBrBJ,KAAKhB,iBACLgB,KAAKM,oB,sDAUCzB,EAAON,GACb,OAAOA,EAAMgC,QAAU1B,I,gCAGjBA,EAAON,GACb,OAAOA,EAAMgC,QAAU1B,I,+BAGlBN,GACL,QAASA,EAAMiC,OAAOD,S,6BAGnBE,EAASlC,GACZ,OAAO,IAAImC,OAAOD,GAASE,KAAKpC,K,uCAsEnBe,GACb,IA1Hcb,EAASmC,EA0HjBvB,EAAQW,KAAK/B,KAAKqB,GACxB,GAAID,EAAMJ,SAEN,IADA,IAAM4B,EAAgBxB,EAAMJ,SAASsB,OAC5BO,EAAQ,EAAGA,EAAQD,EAAeC,IAAS,CAChD,IAAMC,EAAc1B,EAAMJ,SAAS6B,GAAOzB,EAAMd,OA9HjCqC,EA+HKG,GA/HdtC,EA+HOY,GA9HbX,QAAQsC,QAChBvC,EAAQC,QAAQsC,MAAQJ,IA8HI,IAAhBG,GACA1B,EAAM4B,UAAUC,IAtIP,kBAuIT7B,EAAMS,SAASmB,UAAUC,IAtIlB,gBAuIP7B,EAAMS,SAASqB,UAAY9B,EAAME,OAAOuB,GACxCA,EAAQD,IAERxB,EAAM4B,UAAUG,OA3IP,kBA4IT/B,EAAMS,SAASmB,UAAUG,OA3IlB,gBA4IP/B,EAAMS,SAASqB,UAAY,O,0CAOnCnB,KAAKC,YACLD,KAAKC,UAAUoB,UAAYrB,KAAKgB,S,iCAI7B,IA/IM/C,EA+IP,QA/IOA,EAgJD+B,KAAK/B,KAhJKqD,MAAMC,KAAKtD,EAAKE,UAAUgC,QAAQ,SAAA1B,GAAO,MAAI,UAAWA,EAAQC,YAgJ/DQ,SAAQ,SAAAd,GAC3B,EAAKoD,iBAAiBpD,EAAME,W,4BAvHvB,IAAD,OACR,OAAO0B,KAAKf,SAASwC,QAAQ,SAACC,EAAaC,GAAkB,IACjDrC,EAAcqC,EAAdrC,UACR,OAAOoC,GAAsD,SAA1B,EAAKzD,KAAKqB,GAnCfZ,QAAQsC,SAoCvC,O,KCtCJ,SAASY,EAAMC,GAAQ,IAAD,EAC0CA,EAAMC,KAAlEC,EADkB,EAClBA,GAAI1D,EADc,EACdA,KAAMC,EADQ,EACRA,KAAM0D,EADE,EACFA,MAAOC,EADL,EACKA,SAAU7B,EADf,EACeA,UAAW8B,EAD1B,EAC0BA,aAC7CC,EAAa,CAAEJ,KAAI1D,OAAMC,OAAM2D,YACjC7B,IACA+B,EDH0B,eCGO,EACjCA,EFU0B,mBEVO,GAErC,IAAMC,EAAuB,aAAT/D,EAAuB,CAAEgE,QAASR,EAAMtD,OAAS,CAACA,MAAOsD,EAAMtD,OAE7E+D,EAAeJ,EAAe,0BAAMK,UAAU,gBAAhB,KAA0C,KAE9E,OACE,yBAAKA,UAAU,gBACX,2BAAOC,QAAST,EAAIQ,UAAS,oBAAeN,EAAW,sBAAwB,KAAQD,EAClFM,GAEL,yCAAOC,UAAU,iBACLJ,EACAC,EAFZ,CAGOK,SAAWZ,EAAMa,iBACxB,yBAAKH,UAAU,a,WCxBnBI,EAAS,SAACC,GACZC,QAAQC,IAAI,gBAAiBF,IAG1B,SAASG,EAASC,EAAK9E,EAAM+E,GAAoC,IAAzBC,EAAwB,uDAAf,OAAQC,EAAO,uCAC7DC,EAAU,CAAC,eAAgB,kCAC7BD,IACAC,EAAO,cAAP,gBAAoCD,IAGxCE,MAAML,EAAK,CACPE,SACAE,UACAE,KAAMC,KAAKC,UAAL,eAAoBtF,MAEzBuF,MAAK,SAAAC,GAAG,OAAIA,EAAIC,SAAQhB,GACxBc,KACGR,EACAN,GChBL,SAASiB,EAAU/B,GACtB,OACI,yBAAKU,UAAS,wBAAmBV,EAAMgC,gBAAkBhC,EAAMgC,gBAAkB,KAC3EhC,EAAMiC,K,ICECC,E,kDACjB,WAAYlC,GAAQ,IAAD,8BACf,cAAMA,IAED9C,OAAS,CACV,CAAET,KAAM,WAAYD,KAAM,OAAQ0D,GAAI,YAAaC,MAAO,WAAY5B,UJEpD,kBIF+E8B,cAAc,GAC/G,CAAE5D,KAAM,WAAYD,KAAM,WAAY0D,GAAI,eAAgBC,MAAO,WAAY5B,UJGjE,WIHsF8B,cAAc,IAGpH,EAAK8B,kBAAoB,EAAKA,kBAAkBrE,KAAvB,gBACzB,EAAKsE,iBAAmB,EAAKA,iBAAiBtE,KAAtB,gBATT,E,gEAafK,KAAKI,UAAY,IAAItB,EAAUkB,KAAK6B,MAAMqC,QAAQC,QAASnE,KAAKjB,U,+BAG1D,IAAD,OACL,GAAIiB,KAAK6B,MAAMsB,MAAO,OAAO,KAE7B,IAAMpE,EAASiB,KAAKjB,OAAOsB,KAAK,SAAAyB,GAC5B,IAAMsC,EAAa,GAGnB,OAFItC,EAAK1B,YAAagE,EAAWhE,UAAY0B,EAAK1B,WAE3C,kBAACwB,EAAD,eAAOyC,IAAMvC,EAAKC,GAClBD,KAAOA,GACHsC,EAFJ,CAGA7F,MAAO,EAAK+F,OAAS,EAAKA,MAAMxC,EAAKxD,OAAS,GAC9CoE,cAAgB,SAAC6B,GAAW,EAAKP,kBAAkBO,UAGxDC,EAAYxE,KAAKsE,OAAStE,KAAKsE,MAAME,WACvC,kBAACZ,EAAD,CAAWE,IAAM9D,KAAKsE,MAAME,UACjBX,gBAAgB,yBAI/B,OACI,oCACA,0BAAMY,SAAWzE,KAAKiE,iBAAmBS,IAAM1E,KAAK6B,MAAMqC,SACpDnF,EACF,yBAAKwD,UAAU,iBACX,2BAAOA,UAAU,aAAalE,KAAK,SAASE,MAAM,WAIxDiG,K,wCAKQD,GAAQ,IAAD,EACfI,EAASJ,EAAMI,OACfrG,EAAOqG,EAAOrG,KAEpB0B,KAAK4E,UAAL,mBACKtG,EAAOqG,EAAOpG,OADnB,cAEI,YAAa,MAFjB,IAIAyB,KAAKI,UAAUoB,iBAAiBlD,GAChC0B,KAAKI,UAAUE,oBACf9B,EAAmBmG,K,uCAGNJ,GAAQ,IAAD,OACpBA,EAAMM,iBAEN9B,EAAS,kEACL/E,EAAYgC,KAAK6B,MAAMqC,QAAQC,UAAU,SAACW,GACtC,IAAIhB,EAAM,KACNgB,EAAM,mBACNhB,EAAMgB,EAAM,iBAAqBC,KAAK,OAE1C,EAAKH,SAAS,CAAC,UAAad,IAExBgB,EAAO3B,QACP,EAAKtB,MAAMmD,SAASF,EAAO3B,OAC3B,EAAKtB,MAAMoD,YAAY,EAAKX,MAAMY,kB,GA7EhBC,IAAMC,WCAvBC,E,kDACjB,WAAYxD,GAAQ,IAAD,8BACf,cAAMA,IAED9C,OAAS,CACV,CAAET,KAAM,KAAMD,KAAM,OAAQ0D,GAAI,aAAcC,MAAO,KAAMC,UAAU,GACrE,CAAE3D,KAAM,WAAYD,KAAM,OAAQ0D,GAAI,gBAAiBC,MAAO,WAAY5B,ULE9D,WKFmF8B,cAAc,GAC7G,CAAE5D,KAAM,aAAcD,KAAM,OAAQ0D,GAAI,oBAAqBC,MAAO,aAAc5B,ULIrE,aKHb,CAAE9B,KAAM,YAAaD,KAAM,OAAQ0D,GAAI,mBAAoBC,MAAO,YAAa5B,ULInE,YKHZ,CAAE9B,KAAM,WAAYD,KAAM,WAAY0D,GAAI,mBAAoBC,MAAO,WAAY5B,ULCrE,WKD0F8B,cAAc,GACpH,CAAE5D,KAAM,YAAaD,KAAM,WAAY0D,GAAI,eAAgBC,MAAO,SAAUE,cAAc,GAC1F,CAAE5D,KAAM,eAAgBD,KAAM,WAAY0D,GAAI,cAAeC,MAAO,mBAAoBC,UAAU,IAGtG,EAAKgC,iBAAmB,EAAKA,iBAAiBtE,KAAtB,gBAbT,E,gEAiBfK,KAAKI,UAAY,IAAItB,EAAUkB,KAAK6B,MAAMqC,QAAQC,QAASnE,KAAKjB,QAEhEiB,KAAKsF,eAAetF,KAAK6B,MAAM3D,Q,yCAGhBqH,GACXA,EAAUrH,KAAK6D,KAAO/B,KAAK6B,MAAM3D,KAAK6D,IACtC/B,KAAKsF,eAAetF,KAAK6B,MAAM3D,MAGnC8B,KAAKI,UAAUoF,a,+BAGT,IAAD,OACCzG,EAASiB,KAAKjB,OAAOsB,KAAK,SAAAyB,GAC5B,IAAMsC,EAAa,GAGnB,OAFItC,EAAK1B,YAAagE,EAAWhE,UAAY0B,EAAK1B,WAE3C,kBAACwB,EAAD,eAAOyC,IAAMvC,EAAKC,GACXD,KAAOA,GACHsC,EAFX,CAGO7F,MAAO,EAAK+F,OAAS,EAAKA,MAAMxC,EAAKxD,OAAS,GAC9CoE,cAAgB,SAAC6B,GAAW,EAAKP,kBAAkBO,UAG/DC,EAAYxE,KAAKsE,OAAStE,KAAKsE,MAAME,WACvC,kBAACZ,EAAD,CAAWE,IAAM9D,KAAKsE,MAAME,YAGhC,OACE,oCACE,0BAAMC,SAAWzE,KAAKiE,iBAAmBS,IAAM1E,KAAK6B,MAAMqC,SACpDnF,EACF,yBAAKwD,UAAU,iBACX,2BAAOA,UAAU,aAAalE,KAAK,SAASE,MAAM,WAIxDiG,K,wCAKQD,GACd,IAAMI,EAASJ,EAAMI,OAErB,IAAKA,EAAO1C,SAAU,CAAC,IAAD,EACZ3D,EAAOqG,EAAOrG,KACdC,EAAwB,aAAhBoG,EAAOtG,KAAsBsG,EAAOtC,QAAUsC,EAAOpG,MAEnEyB,KAAK4E,UAAL,mBACKtG,EAAOC,GADZ,cAEI,YAAa,MAFjB,IAIAyB,KAAKI,UAAUoB,iBAAiBlD,GAChC0B,KAAKI,UAAUE,oBACf9B,EAAmBmG,M,uCAIVJ,GAAQ,IAAD,OACpBA,EAAMM,iBADc,MAEW7E,KAAK6B,MAA5BsB,EAFY,EAEZA,MAAOsC,EAFK,EAELA,YACTC,EAAO1F,KAAK6B,MAAMqC,QAAQC,QAC1BwB,EAAS3F,KAAKsE,MAAMvC,GAAK,QAAU,OACrC6D,EAAO5H,EAAY0H,GACnB1C,EAAM,gEACV,GAAIhD,KAAKsE,MAAMvC,GACXiB,EAAG,UAAMA,GAAN,OAAYhD,KAAKsE,MAAMvC,GAAvB,SACA,CACH,IAAM8D,EHzEX,SAAgBtF,GAInB,IAJ+C,IAApBuF,IAAmB,yDAC1ChB,EAAmB,GACnBiB,EAAU,oBAAsBD,EAAa,GAAI,wDAC/CE,EAAmBD,EAAWxF,OAC1B0F,EAAI,EAAGA,EAAI1F,EAAQ0F,IACzBnB,GAAUiB,EAAWG,OAAOC,KAAKC,MAAMD,KAAKE,SAAWL,IAE3D,OAAOF,GAAchB,EAASA,EGkEXwB,CAAO,GAClBV,EAAK7D,GAAK8D,EAGd9C,EAASC,EAAK4C,GAAM,SAACd,GACjB,IAAMhB,EAAMgB,EAAOyB,OACfzC,GAAK,EAAKc,SAAS,CAAC,UAAad,IAErC2B,IACA,EAAKrF,UAAUE,sBAChBqF,EAAQxC,K,qCAGAjF,GACX8B,KAAK4E,SAAL,eACO1G,Q,GAvGuBiH,IAAMC,WCLrC,SAASoB,EAAW3E,GACvB,IAAM4E,EAAU5E,EAAM6E,SAASrG,KAC3B,SAACsG,EAAM7F,GAAP,OAAiB,4BAAQvC,QAAUuC,EAAQuD,IAAG,eAAUsC,EAAK5E,KAAQ4E,EAAKzB,aAG9E,OACI,yBAAK3C,UAAU,iBACX,4BAAQA,UAAU,aAAahE,MAAOsD,EAAMtD,MAAOkE,SAAWZ,EAAMa,eAChE,4BAAQnE,MAAQ,GAAhB,MACCkI,I,MC0DjB,SAASG,EAASzD,EAAO0D,GACrBxD,MAAM,gEAAiE,CACnEH,OAAQ,MACRE,QAAS,CAAC,eAAgB,iCAAkC,cAAgB,SAAhB,OAA0BD,MACvFM,MAAM,SAAAqB,GAAM,OAAIA,EAAOnB,UACvBF,MAAM,SAAAqD,GAAUD,EAAcC,MAGtBC,MAvEf,WAAgB,IAAD,EACkBC,mBAAS,MAD3B,mBACNC,EADM,KACMjC,EADN,OAEwBgC,mBAAS,MAFjC,mBAENE,EAFM,KAESjC,EAFT,OAG0B+B,mBAAS,GAHnC,mBAGNG,EAHM,KAGUC,EAHV,OAIuBJ,mBAAS,IAJhC,mBAINK,EAJM,KAIMR,EAJN,OAK2BG,oBAAS,GALpC,mBAKNM,EALM,KAKQC,EALR,KAOPC,EAAcC,iBAAO,MACrBC,EAAcD,iBAAO,MAEvBR,GAAcK,IACdC,GAAgB,GAChBX,EAASK,EAAYJ,IAGzB,IAAMc,EAAWV,EACX,yBAAK1E,UAAU,gBACb,yEACA,kBAACiE,EAAD,CAAYE,SAAWW,EACX9I,MAAQ4I,EACRzE,cAAgB,SAAA6B,GAAW6C,GAAe7C,EAAMI,OAAOpG,WAGrE,KAKAqJ,EAAW,CAAC1J,KAAOiJ,EAAiB,EAAKE,EAAWF,EAAiB,GAHlD,CACrBpF,GAAI,KAAMmD,SAAU,GAAI,WAAc,GAAI,UAAa,GAAI2C,SAAU,GAAIC,WAAW,EAAMC,cAAc,IAGxGC,EAAWf,EACT,kBAAC,EAAD,eAAU9D,MAAQ8D,EACR/C,QAAUwD,GACNE,EAFd,CAGUnC,YAAgB,WACZmB,EAASK,EAAYJ,GACVO,EAAa,OAGtC,KAEN,OACE,yBAAK7E,UAAU,OACb,4BAAQA,UAAU,cACd,yBAAKA,UAAU,eAAf,WAAuC2E,GAAiB,KAG5D,yBAAK3E,UAAU,YACX,yBAAKA,UAAU,eACX,kBAAC,EAAD,CAAUY,MAAQ8D,EACRjC,SAAWA,EACXC,YAAcA,EACdf,QAAUsD,IAGlBG,EAEAK,MClDIC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpF,MAAK,SAAAqF,GACJA,EAAaC,gBAEdC,OAAM,SAAApG,GACLC,QAAQD,MAAMA,EAAMqG,c","file":"authform/static/js/main.4f20fc2d.chunk.js","sourcesContent":["export const getFormData = (form) => {\r\n    let data = {}\r\n    for (const input of form.elements){\r\n        if (input.type !== 'submit' && input.type !== 'button') {\r\n            data[input.name] = form[input.name].value\r\n        }\r\n    }\r\n    return data\r\n}\r\n\r\nexport const getInputsForValidation = (inputsArray) => {\r\n    return inputsArray.filter(input => input.validator).map( input => {\r\n        return {\r\n            fieldName: input.name,\r\n            checkName: input.validator,\r\n        }\r\n    })\r\n}\r\n\r\nexport const DATASET_TOUCH_PROP = 'data-notouched'\r\nexport const resetDataNotouched = (element) => {\r\n    if (element.dataset.notouched) {\r\n        element.dataset.notouched = false\r\n    }\r\n}\r\n","import { getInputsForValidation } from './formUtils'\r\n\r\nconst CLASSNAME_ERRORFIELD = 'App-errorField'\r\nconst CLASSNAME_ERRORMSG = 'App-errorMsg'\r\n\r\nexport const DATASET_VALID_PROP = 'data-valid'\r\nconst getDataValid = (element) => element.dataset.valid\r\nconst setDataValid = (element, checkValue) => {\r\n    if (element.dataset.valid) {\r\n        element.dataset.valid = checkValue\r\n    }\r\n}\r\nconst getElements = (form) => Array.from(form.elements).filter( element => 'valid' in element.dataset)\r\n\r\nexport const USERNAMESIMPLE = 'username_simple'\r\nexport const USERNAME = 'username'\r\nexport const REQUIRED = 'required'\r\nexport const PASSWORD = 'password'\r\nexport const FIRSTNAME = 'firstname'\r\nexport const LASTNAME = 'lastname'\r\n\r\nconst ERROR_MSGS = {\r\n    'required': 'This field may not be blank.',\r\n    'minl': (count) => `Minimal length this field ${count}`,\r\n    'maxl': (count) => `Maximal length this field ${count}`,\r\n    'nopattern': 'Value does not match pattern',\r\n}\r\n\r\nexport default class Validator {\r\n    constructor(form, inputs){\r\n        this.form = form\r\n        this.submitbtn = form.querySelector('[type=\"submit\"]')\r\n        this.checkers = getInputsForValidation(inputs)\r\n\r\n        this.initValidation()\r\n        this.toggleDisabledBtn()\r\n    }\r\n\r\n    get valid (){\r\n        return this.checkers.reduce( (resultCheck, currentInput) => {\r\n            const { fieldName } = currentInput\r\n            return resultCheck && getDataValid(this.form[fieldName]) === 'true'\r\n        }, true )\r\n    }\r\n\r\n    minLength(count, value) {\r\n        return value.length >= count\r\n    }\r\n\r\n    maxLength(count, value) {\r\n        return value.length <= count\r\n    }\r\n\r\n    required(value) {\r\n        return !!value.trim().length\r\n    }\r\n\r\n    regExp(pattern, value) {\r\n        return new RegExp(pattern).test(value)\r\n    }\r\n\r\n    initValidation = () => {\r\n        const DEFAULT_MINLENGTH = 1\r\n        const DEFAULT_MAXLENGTH = 150\r\n\r\n        this.checkers.forEach( check => {\r\n            const field = this.form[check.fieldName]\r\n            let checkersSet, msgSet = []\r\n\r\n            switch (check.checkName) {\r\n                case REQUIRED: checkersSet = [this.required]\r\n                    msgSet = [ERROR_MSGS.required]; break\r\n\r\n                case USERNAMESIMPLE: checkersSet = [\r\n                    this.required,\r\n                    this.minLength.bind(this, DEFAULT_MINLENGTH),\r\n                    this.maxLength.bind(this, DEFAULT_MAXLENGTH),\r\n                ]\r\n                msgSet = [ERROR_MSGS.required, ERROR_MSGS.minl(DEFAULT_MINLENGTH), ERROR_MSGS.maxl(DEFAULT_MAXLENGTH)];\r\n                break\r\n\r\n                case USERNAME: checkersSet = [\r\n                    this.required,\r\n                    this.minLength.bind(this, DEFAULT_MINLENGTH),\r\n                    this.maxLength.bind(this, DEFAULT_MAXLENGTH),\r\n                    this.regExp.bind(this, '^[\\\\w.@+-]+$')\r\n                ];\r\n                msgSet = [\r\n                    ERROR_MSGS.required,\r\n                    ERROR_MSGS.minl(DEFAULT_MINLENGTH),\r\n                    ERROR_MSGS.maxl(DEFAULT_MAXLENGTH),\r\n                    'Letters, digits and @/./+/-/_ only'\r\n                ]\r\n                break\r\n\r\n                case PASSWORD: checkersSet = [\r\n                    this.minLength.bind(this, DEFAULT_MINLENGTH),\r\n                    this.maxLength.bind(this, 128),\r\n                    this.regExp.bind(this, '^(?=.*[A-Z])(?=.*\\\\d).{8,}$')\r\n                ];\r\n                msgSet = [\r\n                    ERROR_MSGS.minl(DEFAULT_MINLENGTH),\r\n                    ERROR_MSGS.maxl(128),\r\n                    ERROR_MSGS.nopattern\r\n                ]\r\n                break\r\n\r\n                case FIRSTNAME: checkersSet = [\r\n                    this.maxLength.bind(this, 30),\r\n                ]\r\n                msgSet = [ERROR_MSGS.maxl(30),]\r\n                break\r\n\r\n                case LASTNAME: checkersSet = [\r\n                    this.maxLength.bind(this, DEFAULT_MAXLENGTH),\r\n                ]\r\n                msgSet = [ERROR_MSGS.maxl(DEFAULT_MAXLENGTH)]\r\n                break\r\n\r\n                default: checkersSet = []\r\n            }\r\n\r\n            field.checkers = checkersSet\r\n            field.msgSet = msgSet\r\n            field.errorBox = field.nextElementSibling\r\n        })\r\n    }\r\n\r\n    checkValidByName(fieldName) {\r\n        const field = this.form[fieldName]\r\n        if (field.checkers) {\r\n            const countCheckers = field.checkers.length\r\n            for (let index = 0; index < countCheckers; index++) {\r\n                const checkResult = field.checkers[index](field.value)\r\n                setDataValid(field, checkResult)\r\n                if (checkResult === false) {\r\n                    field.classList.add(CLASSNAME_ERRORFIELD)\r\n                    field.errorBox.classList.add(CLASSNAME_ERRORMSG)\r\n                    field.errorBox.innerHTML = field.msgSet[index]\r\n                    index = countCheckers\r\n                } else {\r\n                    field.classList.remove(CLASSNAME_ERRORFIELD)\r\n                    field.errorBox.classList.remove(CLASSNAME_ERRORMSG)\r\n                    field.errorBox.innerHTML = ''\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    toggleDisabledBtn() {\r\n        if (this.submitbtn) {\r\n            this.submitbtn.disabled = !this.valid\r\n        }\r\n    }\r\n\r\n    validate(){\r\n        getElements(this.form).forEach(input => {\r\n            this.checkValidByName(input.name)\r\n        })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { DATASET_VALID_PROP } from \"../Validator\";\r\nimport { DATASET_TOUCH_PROP } from '../formUtils'\r\n\r\nexport function Input(props) {\r\n    const {id, type, name, label, readOnly, validator, requiredView} = props.opts\r\n    const inputProps = { id, type, name, readOnly }\r\n    if (validator) {\r\n        inputProps[DATASET_VALID_PROP] = false\r\n        inputProps[DATASET_TOUCH_PROP] = true\r\n    }\r\n    const valueProps = (type === 'checkbox') ? { checked: props.value} : {value: props.value}\r\n\r\n    const requiredSpan = requiredView ? <span className=\"App-required\">*</span> : null\r\n\r\n    return (\r\n      <div className=\"App-inputBox\">\r\n          <label htmlFor={id} className={`App-label ${readOnly ? 'App-label--readonly' : ''}`}>{ label }\r\n              {requiredSpan}\r\n          </label>\r\n          <input className=\"App-inputText\"\r\n                 { ...inputProps }\r\n                 { ...valueProps }\r\n                 onChange={ props.changeHandler }/>\r\n          <div className=\"App-gap\"></div>\r\n      </div>\r\n    )\r\n}\r\n","const fError = (error) => {\r\n    console.log(\"FETCH ERROR: \", error)\r\n}\r\n\r\nexport function fetchApp(url, data, fCallback, method = 'POST', token) {\r\n    const headers = {'Content-Type': 'application/json;charset=utf-8'}\r\n    if (token) {\r\n        headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    fetch(url, {\r\n        method,\r\n        headers,\r\n        body: JSON.stringify({ ...data })\r\n    })\r\n        .then(res => res.json(), fError)\r\n        .then(\r\n            fCallback,\r\n            fError\r\n        )\r\n}\r\n\r\nexport function makeId(length, onlyNumber = true) {\r\n    let result           = '';\r\n    let characters       = `0123456789${onlyNumber ? '': 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'}`;\r\n    const charactersLength = characters.length;\r\n    for ( let i = 0; i < length; i++ ) {\r\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n    }\r\n    return onlyNumber ? +result : result;\r\n}\r\n","import React from 'react';\r\n\r\nexport function ServerMsg(props){\r\n    return (\r\n        <div className={`App-serverMsg ${props.classNameModify ? props.classNameModify : ''}`}>\r\n            { props.msg }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Input} from \"./Input\";\r\nimport {fetchApp} from \"../fetchUtils\";\r\nimport Validator, { USERNAMESIMPLE, REQUIRED } from \"../Validator\";\r\nimport { getFormData, resetDataNotouched } from \"../formUtils\";\r\nimport {ServerMsg} from \"./Servermsg\";\r\n\r\nexport default class AuthForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.inputs = [\r\n            { name: 'username', type: 'text', id: 'userLogin', label: 'Username', validator: USERNAMESIMPLE, requiredView: true},\r\n            { name: 'password', type: 'password', id: 'userPassword', label: 'Password', validator: REQUIRED, requiredView: true}\r\n        ]\r\n\r\n        this.handleInputChange = this.handleInputChange.bind(this);\r\n        this.handleSubmitForm = this.handleSubmitForm.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validator = new Validator(this.props.formRef.current, this.inputs)\r\n    }\r\n\r\n    render() {\r\n        if (this.props.token) return null;\r\n\r\n        const inputs = this.inputs.map( opts => {\r\n            const extendOpts = {}\r\n            if (opts.validator) { extendOpts.validator = opts.validator }\r\n\r\n            return <Input key={ opts.id }\r\n                   opts={ opts }\r\n                   {...extendOpts}\r\n                   value={this.state && this.state[opts.name] || ''}\r\n                   changeHandler={ (event) => {this.handleInputChange(event)}}\r\n            /> })\r\n\r\n        const serverMsg = this.state && this.state.serverMsg && (\r\n            <ServerMsg msg={ this.state.serverMsg }\r\n                       classNameModify=\"App-serverMsg--error\"\r\n            />\r\n        )\r\n\r\n        return(\r\n            <>\r\n            <form onSubmit={ this.handleSubmitForm } ref={ this.props.formRef }>\r\n                { inputs }\r\n                <div className=\"App-buttonBox\">\r\n                    <input className=\"App-button\" type=\"submit\" value=\"Send\"/>\r\n                </div>\r\n            </form>\r\n\r\n            { serverMsg }\r\n            </>\r\n        )\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: target.value,\r\n            'serverMsg': null\r\n        });\r\n        this.validator.checkValidByName(name)\r\n        this.validator.toggleDisabledBtn()\r\n        resetDataNotouched(target)\r\n    }\r\n\r\n    handleSubmitForm(event) {\r\n        event.preventDefault()\r\n\r\n        fetchApp('https://emphasoft-test-assignment.herokuapp.com/api-token-auth/',\r\n            getFormData(this.props.formRef.current), (result) => {\r\n                let msg = null\r\n                if (result['non_field_errors']) {\r\n                    msg = result['non_field_errors'].join('\\n')\r\n                }\r\n                this.setState({'serverMsg': msg})\r\n\r\n                if (result.token) {\r\n                    this.props.setToken(result.token)\r\n                    this.props.setUsername(this.state.username)\r\n                }\r\n            })\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Input} from \"./Input\";\r\nimport {fetchApp, makeId} from \"../fetchUtils\";\r\nimport Validator, {USERNAME, FIRSTNAME, LASTNAME, PASSWORD} from \"../Validator\";\r\nimport {getFormData, resetDataNotouched} from \"../formUtils\";\r\nimport {ServerMsg} from \"./Servermsg\";\r\n\r\nexport default class UserForm extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        this.inputs = [\r\n            { name: 'id', type: 'text', id: 'userEditId', label: 'ID', readOnly: true},\r\n            { name: 'username', type: 'text', id: 'userEditLogin', label: 'Username', validator: USERNAME, requiredView: true},\r\n            { name: 'first_name', type: 'text', id: 'userEditFirstName', label: 'First name', validator: FIRSTNAME},\r\n            { name: 'last_name', type: 'text', id: 'userEditLastName', label: 'Last name', validator: LASTNAME},\r\n            { name: 'password', type: 'password', id: 'userEditPassword', label: 'Password', validator: PASSWORD, requiredView: true},\r\n            { name: 'is_active', type: 'checkbox', id: 'userIsActive', label: 'Active', requiredView: true},\r\n            { name: 'is_superuser', type: 'checkbox', id: 'userIsSuper', label: 'Superuser status', readOnly: true}\r\n        ]\r\n\r\n        this.handleSubmitForm = this.handleSubmitForm.bind(this)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.validator = new Validator(this.props.formRef.current, this.inputs)\r\n\r\n        this.updateUserData(this.props.data)\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.data.id !== this.props.data.id) {\r\n            this.updateUserData(this.props.data)\r\n        }\r\n\r\n        this.validator.validate()\r\n    }\r\n\r\n    render() {\r\n        const inputs = this.inputs.map( opts => {\r\n            const extendOpts = {}\r\n            if (opts.validator) { extendOpts.validator = opts.validator }\r\n\r\n            return <Input key={ opts.id }\r\n                          opts={ opts }\r\n                          {...extendOpts}\r\n                          value={this.state && this.state[opts.name] || ''}\r\n                          changeHandler={ (event) => {this.handleInputChange(event)}}\r\n            /> })\r\n\r\n        const serverMsg = this.state && this.state.serverMsg && (\r\n            <ServerMsg msg={ this.state.serverMsg }/>\r\n        )\r\n\r\n        return (\r\n          <>\r\n            <form onSubmit={ this.handleSubmitForm } ref={ this.props.formRef }>\r\n                { inputs }\r\n                <div className=\"App-buttonBox\">\r\n                    <input className=\"App-button\" type=\"submit\" value=\"Save\"/>\r\n                </div>\r\n            </form>\r\n\r\n            { serverMsg }\r\n          </>\r\n        )\r\n    }\r\n\r\n    handleInputChange(event) {\r\n        const target = event.target;\r\n\r\n        if (!target.readOnly) {\r\n            const name = target.name;\r\n            const value = target.type === 'checkbox' ? target.checked : target.value\r\n\r\n            this.setState({\r\n                [name]: value,\r\n                'serverMsg': null\r\n            });\r\n            this.validator.checkValidByName(name)\r\n            this.validator.toggleDisabledBtn()\r\n            resetDataNotouched(target)\r\n        }\r\n    }\r\n\r\n    handleSubmitForm(event) {\r\n        event.preventDefault()\r\n        const { token, updateUsers } = this.props\r\n        const FORM = this.props.formRef.current\r\n        const METHOD = this.state.id ? 'PATCH' : 'POST'\r\n        let DATA = getFormData(FORM)\r\n        let url = 'https://emphasoft-test-assignment.herokuapp.com/api/v1/users/'\r\n        if (this.state.id) {\r\n            url = `${url}${this.state.id}/`\r\n        } else {\r\n            const ID = makeId(4)\r\n            DATA.id = ID\r\n        }\r\n\r\n        fetchApp(url, DATA, (result) => {\r\n            const msg = result.detail\r\n            if (msg) this.setState({'serverMsg': msg})\r\n\r\n            updateUsers()\r\n            this.validator.toggleDisabledBtn()\r\n        }, METHOD, token)\r\n    }\r\n\r\n    updateUserData(data) {\r\n        this.setState({\r\n            ...data\r\n        })\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nexport function SelectUser(props) {\r\n    const options = props.usersSet.map(\r\n        (user, index) => <option value={ ++index } key={`user_${user.id}`} >{user.username}</option>\r\n    )\r\n\r\n    return (\r\n        <div className=\"App-selectBox\">\r\n            <select className=\"App-select\" value={props.value} onChange={ props.changeHandler }>\r\n                <option value={ 0 }>--</option>\r\n                {options}\r\n            </select>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useRef } from 'react';\nimport AuthForm from './components/Authform'\nimport UserForm from \"./components/Userform\";\nimport { SelectUser } from \"./components/SelectUser\";\nimport './App.css';\n\nfunction App() {\n  const [stateToken, setToken] = useState(null)\n  const [stateUsername, setUsername] = useState(null)\n  const [stateUserindex, setUserindex] = useState(0)\n  const [stateUsers, setStateUsers] = useState([])\n  const [needGetUsers, setNeedGetUsers] = useState(true)\n\n  const refAuthForm = useRef(null)\n  const refUserForm = useRef(null)\n\n  if (stateToken && needGetUsers) {\n      setNeedGetUsers(false)\n      getUsers(stateToken, setStateUsers)\n  }\n\n  const titleBox = stateToken\n      ? <div className=\"App-titleBox\">\n          <h4>Please add user or edit current from list</h4>\n          <SelectUser usersSet={ stateUsers }\n                      value={ stateUserindex }\n                      changeHandler={ event => { setUserindex( +event.target.value )} }\n          />\n        </div>\n      : null\n\n  const EMPTY_USER_INPUT = {\n      id: null, username: '', 'first_name': '', 'last_name': '', password: '', is_active: true, is_superuser: false\n  }\n  const userData = {data: (stateUserindex > 0) ? stateUsers[stateUserindex - 1] : EMPTY_USER_INPUT }\n  let userForm = stateToken\n      ? <UserForm token={ stateToken }\n                  formRef={ refUserForm }\n                  {...userData}\n                  updateUsers = { () => {\n                      getUsers(stateToken, setStateUsers);\n                      /*RESET: */setUserindex(0) }\n                  }\n        />\n      : null\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <div className=\"App-wrapper\">Welcome { stateUsername || ''}</div>\n      </header>\n\n      <div className=\"App-body\">\n          <div className=\"App-wrapper\">\n              <AuthForm token={ stateToken }\n                        setToken={ setToken }\n                        setUsername={ setUsername }\n                        formRef={ refAuthForm }\n              />\n\n              { titleBox }\n\n              { userForm }\n          </div>\n      </div>\n    </div>\n  );\n}\n\nfunction getUsers(token, setStateUsers) {\n    fetch('https://emphasoft-test-assignment.herokuapp.com/api/v1/users/', {\n        method: 'GET',\n        headers: {'Content-Type': 'application/json;charset=utf-8', \"Authorization\": `Token ${token}`}\n    }).then( result => result.json())\n      .then( list => { setStateUsers(list) })\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
